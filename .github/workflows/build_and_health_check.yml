name: Test and Health Check

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: configure 1password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: load secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
          unset-previous: false
        env:
          ENV_FILE: op://instance/.env/.env

      - name: create env file
        run: echo "${{ env.ENV_FILE }}" > .env

      - name: run tests
        run: ./gradlew test

      - name: upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/build/reports/tests/
            **/build/test-results/

  health-check:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: configure 1password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: load secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
          unset-previous: false
        env:
          ENV_FILE: op://instance/.env/.env

      - name: create env file
        run: echo "${{ env.ENV_FILE }}" > .env

      - name: deploy container
        run: |
          chmod +x script/container_deploy.sh
          cd script
          DEPLOY_OUTPUT=$(./container_deploy.sh)
          echo "$DEPLOY_OUTPUT"
          DEPLOYED_INFO=$(echo "$DEPLOY_OUTPUT" | grep "DEPLOY_RESULT:" | tail -n1)
          DEPLOYED_PORT=$(echo "$DEPLOYED_INFO" | cut -d':' -f4)
          echo "DEPLOYED_PORT=$DEPLOYED_PORT" >> $GITHUB_ENV

      - name: health check
        run: |
          MAX_RETRIES=30
          RETRY_COUNT=0
          HEALTH_CHECK_URL="http://localhost:${{ env.DEPLOYED_PORT }}/api/v1/health"
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL || echo "000")
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "health check passed"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "waiting for app to start... $RETRY_COUNT/$MAX_RETRIES"
              sleep 10 
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "health check failed"
            exit 1
          fi

      - name: cleanup containers
        if: always()
        run: |
          BLUE_CONTAINER=$(docker ps -q --filter "name=profanity-blue")
          GREEN_CONTAINER=$(docker ps -q --filter "name=profanity-green")
          
          if [ -n "$BLUE_CONTAINER" ]; then
            docker stop $BLUE_CONTAINER || true
            docker rm $BLUE_CONTAINER || true
          fi
          
          if [ -n "$GREEN_CONTAINER" ]; then
            docker stop $GREEN_CONTAINER || true
            docker rm $GREEN_CONTAINER || true
          fi
          
          docker image prune -f || true
